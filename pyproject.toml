[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "flask-ad-service"
dynamic = ["version"]
description = 'Ad service backend with authentication, view/posting of new ads and commenting on them.'
readme = "README.md"
requires-python = "~=3.11"
license = "MIT"
keywords = []
authors = [{ name = "Farhood Etaati", email = "farhoodetaati@gmail.com" }]
classifiers = ["Programming Language :: Python :: 3.11"]
dependencies = [
  "flask",
  "flask-security-too",
  "flask-sqlalchemy",
  "loguru",
  "flask-smorest",
  "marshmallow-sqlalchemy",
  "psycopg2-binary",
]

[project.urls]
Documentation = "https://github.com/FeryET/flask-ad-service#readme"
Issues = "https://github.com/FeryET/flask-ad-service/issues"
Source = "https://github.com/FeryET/flask-ad-service"

[tool.hatch.version]
path = "src/flask_ad_service/__about__.py"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "pytest-mock",
  "pytest-cov",
  "faker",
  "factory_boy>=3.3.0",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests} -c pyproject.toml"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]

[[tool.hatch.envs.all.matrix]]
python = ["3.11"]

[tool.hatch.envs.lint]
detached = true
dependencies = ["black>=23.1.0", "mypy>=1.0.0", "ruff>=0.0.243"]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/flask_ad_service tests}"
style = ["ruff {args:.}", "black --check --diff {args:.}"]
fmt = ["black {args:.}", "ruff --fix {args:.}", "style"]
all = ["style", "typing"]

[tool.black]
target-version = ["py311"]
line-length = 88
skip-string-normalization = false

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  "ISC001",
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
]

[tool.ruff.isort]
known-first-party = ["flask_ad_service"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
# Tests can use not used function args
"tests/**/*" = ["PLR2004", "S101", "TID252", "ARG001"]

[tool.coverage.run]
source_pkgs = ["flask_ad_service", "tests"]
branch = true
parallel = true
omit = ["src/flask_ad_service/__about__.py"]

[tool.coverage.paths]
flask_ad_service = [
  "src/flask_ad_service",
  "*/pars-tasmim-code-challenge/src/flask_ad_service",
]
tests = ["tests", "*/pars-tasmim-code-challenge/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]


[tool.pytest.ini_options]
testpaths = "tests"
addopts = ["-ra", "--tb=line"]
norecursedirs = [".vscode", "__pycache__", ".git", ".hatch"]
# Warnings that should be ignored
filterwarnings = ["ignore::DeprecationWarning"]
# custom markers that can be used using pytest.mark
markers = [
  "slow: lower-importance tests that take an excessive amount of time",
  "unit_test",
  "integration_test",
  "requires_db",
]
# usefixtures = ["app_ctx"]
pythonpath = ["."]
